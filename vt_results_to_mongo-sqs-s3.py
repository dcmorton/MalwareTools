#!/usr/bin/env python
# Copyright (C) 2015 Derek Morton
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#

import sys
import os
import json
import hashlib
import argparse
from time import sleep
from virus_total_apis import PublicApi as VirusTotalPublicApi
from pymongo import MongoClient
import boto.sqs
from boto.sqs.message import Message
import boto
import boto.s3.connection
import magic


# Define your VirusTotal API Key
API_KEY = ''

# Define your MongoDB connection deatils
MONGO_IP = ''
MONGO_PORT = ''
MONGO_DB = ''
MONGO_COLLECTION = ''
MONGO_USER = ''
MONGO_PASS = ''

COMPLETED_DIR = ''

# Define your AWS Info
AWS_REGION = 'us-east-1'
AWS_ACCESS_KEY_ID = ''
AWS_SECRET_KEY_ID = ''
AWS_SQS_QUEUE = ''
AWS_S3_BUCKET = ''
#### No more changes needed past this point ####

# Connect to MongoDB
client = MongoClient("mongodb://"+MONGO_IP+":"+MONGO_PORT)
client[MONGO_DB].authenticate(MONGO_USER, MONGO_PASS, mechanism='SCRAM-SHA-1')
uri = "mongodb://"+MONGO_USER+":"+MONGO_PASS+"@"+MONGO_IP+":"+MONGO_PORT+"/"+MONGO_DB+"?authMechanism=SCRAM-SHA-1"
client = MongoClient(uri)
collection = client[MONGO_DB][MONGO_COLLECTION]

# Initalize the VirusTotal Function
vt = VirusTotalPublicApi(API_KEY)

# Initalize our SQS Connection
conn = boto.sqs.connect_to_region(AWS_REGION,aws_access_key_id=AWS_ACCESS_KEY_ID, aws_secret_access_key=AWS_SECRET_KEY_ID)
q = conn.create_queue(AWS_SQS_QUEUE, 300)

# Initialize our S3 Connection
s3conn = boto.connect_s3(aws_access_key_id = AWS_ACCESS_KEY_ID, aws_secret_access_key = AWS_SECRET_KEY_ID,)
bucket = s3conn.get_bucket(AWS_S3_BUCKET)

# Function to walk the provided directory and and files to the queue
def dirwalk(dirname):
        for root, dirs, files in os.walk(dirname, topdown=False):
                for name in files:
                        filepath=(os.path.join(root, name))
                        filepath=os.path.abspath(filepath)
                        print filepath
                        m = Message()
                        m.set_body(filepath)
                        q.write(m)

# Upload the things to S3
def s3upload(sample_file,sample_file_md5,dirhash):
        key = bucket.new_key(dirhash+sample_file_md5)
        key.set_contents_from_filename(sample_file, reduced_redundancy=True)
        print "File uploaded to S3"

# Function to put a single file into the queue
def sqsput(filename):
        print filename
        m = Message()
        m.set_body(filename)
        q.write(m)

# Function to pull items from the queue and submit to VirusTotal
def sqsget(sample_file,m):
        print sample_file
        try:
                f = open(sample_file, "rb")
                sample_file_content = f.read()
                sample_size = f.tell()
                f.close()
                sample_file_md5 = hashlib.md5(sample_file_content).hexdigest()
                dirhash = str(sample_file_md5[:1]+"/"+sample_file_md5[:2]+"/"+sample_file_md5[:3]+"/"+sample_file_md5[:4]+"/"+sample_file_md5[:5]+"/")
                filemagic = magic.from_file(sample_file, mime=True)

                if os.path.exists(COMPLETED_DIR) == False:
                        os.mkdir(COMPLETED_DIR)

                if sample_size >= 33554432:
                        print "Sample larger than 32 MB"
                        os.rename(sample_file,'/mnt/staging/large/'+sample_file)
                        print

                elif collection.find({'results.md5':sample_file_md5}).count() == 0:
                        vt_response =  vt.get_file_report(sample_file_md5)
                        try:
                                if vt_response['response_code'] == 200 and vt_response['results']['response_code'] == 1:
                                        if filemagic == 'text/html' and vt_response['results']['positives'] == 0:
                                                print "HTML file is a dud; removing"
                                                os.unlink(sample_file)
                                                q.delete_message(m)
                                                print
                                        else:
                                                collection.insert(vt_response)
                                                print "Sample " + sample_file_md5 + " added to database"
                                                q.delete_message(m)
                                                s3upload(sample_file,sample_file_md5,dirhash)
                                                if os.path.exists(COMPLETED_DIR+dirhash) == False:
                                                        os.makedirs(COMPLETED_DIR+dirhash)
                                                os.rename(sample_file,COMPLETED_DIR+dirhash+sample_file_md5)
                                                print "Sample " + sample_file_md5 + " moved to " + COMPLETED_DIR+dirhash+sample_file_md5
                                                print
                                elif vt_response['response_code'] == 204:
                                        print "Hit API Limit; cooling off for 15 seconds"
                                        print "The standard VirusTotal API Key allows 4 requests per minute"
                                        sleep(15)
                                        print
                                else:
                                        print 'Sample not found; submitting to VirusTotal'
                                        vt_response = vt.scan_file(sample_file)
#                                       print vt_response
                                        if vt_response['response_code'] == 200 and vt_response['results']['response_code'] == 1:
                                                print "Sample submiited successfully; checking back later"
                                                q.delete_message(m)
                                                print
                                        else:
                                                print "Sample submit failed; try again later"
                                                print
                        except:
                                print "Something happened."
                                print
                else:
                        print "Sample " + sample_file_md5 + " already exists in database"
                        q.delete_message(m)
                        os.unlink(sample_file)
                        print

        except (IOError, OSError): 
                print "Can't open file; not trying more"
                q.delete_message(m)
                print

def main():
        # Parse command line args given to see if we're scanning a file, directory or both
        parser = argparse.ArgumentParser(description='This is a script to submit samples to VirusTotal')

        parser.add_argument('-f', action="store", dest="filename")
        parser.add_argument('-d', action="store", dest="dirname")
        parser.add_argument('-r', action="store_true", dest="runqueue")
        parser.add_argument('-p', action="store_true", dest="purgequeue")

        parser_results = parser.parse_args()

        if parser_results.dirname != None:
            dirwalk(parser_results.dirname)

        if parser_results.filename != None:
            sqsput(parser_results.filename)

        if parser_results.purgequeue != False:
                print "Purging queue " + AWS_SQS_QUEUE
                q.purge()

        if parser_results.runqueue != False:
                try:
                        while True:
                                rs = q.get_messages()
                                if not rs:
                                        print "Queue is empty"
                                        print "Sleeping for 15 seconds"
                                        print
                                        sleep(15)
                                else:
                                        m = rs[0]
                                        sample_file = m.get_body()
                                        sqsget(sample_file,m)

                except KeyboardInterrupt:
                        pass

if __name__ == '__main__':
    main()
